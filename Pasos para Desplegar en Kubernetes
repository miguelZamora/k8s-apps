Pasos para Desplegar en Kubernetes

Crea los recursos:

bash

apps_run_k8s.sh 

kubectl apply -f mysql-secret.yaml
kubectl apply -f mysql-pvc.yaml
kubectl apply -f mysql-deployment.yaml
kubectl apply -f php-nginx-configmap.yaml
kubectl apply -f php-nginx-deployment.yaml
kubectl apply -f php-nginx-service.yaml
Verifica los Pods y Services:

bash
kubectl get pods,svc
Accede a la aplicaciÃ³n:

Si estÃ¡s en Minikube:

bash
minikube service php-nginx-service --url
Si estÃ¡s en la nube, usa la IP externa del NodePort (puerto 30080).







Â¿CÃ³mo reiniciar Minikube desde cero?
Si quieres limpiar todo y comenzar de nuevo (eliminar deployments, pods, configuraciones previas):

a) Eliminar todo en Minikube
bash
# 1. Eliminar todos los recursos de Kubernetes en el clÃºster actual


kubectl delete all --all  # Borra pods, services, deployments, etc.
kubectl delete pvc --all  # Borra PersistentVolumeClaims (si los hay)
kubectl delete secrets --all  # Borra Secrets
kubectl delete configmaps --all  # Borra ConfigMaps

# 2. Reiniciar Minikube (opcional, si quieres un clÃºster totalmente nuevo)

minikube stop  # Detiene Minikube
minikube delete  # Elimina el clÃºster actual
minikube start  # Crea un nuevo clÃºster


b) Verificar que todo estÃ© limpio

bash

kubectl get all  # No deberÃ­a mostrar recursos
kubectl get ns   # Solo deberÃ­a aparecer "default", "kube-system", etc.

2. Â¿QuÃ© son los "Namespaces" (Espacios de Nombres) en Kubernetes?

Los namespaces son una forma de dividir un clÃºster de Kubernetes en entornos virtuales aislados. Son Ãºtiles para:

Separar aplicaciones (ej: producciÃ³n, desarrollo, testing).

Evitar conflictos de nombres (ej: dos equipos usando el mismo nombre de Deployment).

Controlar acceso con RBAC (permisos por namespace).

Namespaces por defecto en Minikube

Al iniciar Minikube, estos namespaces existen:

default: Donde se crean los recursos si no especificas otro.

kube-system: Contiene los componentes del sistema (CoreDNS, mÃ©tricas, etc.). No lo modifiques.

kube-public: Para recursos accesibles globalmente (rara vez usado).

kube-node-lease: Para controlar nodos (avanzado).

Â¿CÃ³mo usar namespaces?
a) Crear un nuevo namespace

	bash

	kubectl create namespace desarrollo


b) Trabajar en un namespace especÃ­fico

bash

# 1. Crear un Deployment en el namespace "desarrollo"

	kubectl create deployment mi-app --image=nginx -n desarrollo

# 2. Ver recursos solo en "desarrollo"

	kubectl get pods -n desarrollo

# 3. Cambiar el namespace por defecto (evita usar -n siempre)
	
	kubectl config set-context --current --namespace=desarrollo

3. Â¿CÃ³mo usar el Dashboard de Kubernetes?

El Dashboard es una interfaz web para gestionar tu clÃºster. En Minikube, se activa asÃ­:

a) Iniciar el Dashboard

	bash
	
	minikube dashboard
	
	Esto abrirÃ¡ automÃ¡ticamente tu navegador en la URL del Dashboard.

b) Navegar en el Dashboard

	Namespaces: En el menÃº izquierdo, selecciona un namespace para filtrar recursos.

	


	Ver Pods/Deployments: Haz clic en la secciÃ³n correspondiente.

Crear recursos: BotÃ³n + Create (puedes subir un YAML o usar el formulario).

c) Ejemplo: Crear un Deployment desde el Dashboard
Ve a "Workloads" > "Deployments".

Haz clic en "Create".

Ingresa:

Name: mi-app

Namespace: desarrollo (o default)

Container Image: nginx

Haz clic en "Deploy".

4. Resumen de Comandos Ãštiles
Comando	DescripciÃ³n
minikube delete	Borra el clÃºster actual
kubectl get ns	Lista todos los namespaces
kubectl create namespace X	Crea un nuevo namespace
kubectl get pods -n X	Lista pods en el namespace X
minikube dashboard	Abre el Dashboard web
Â¿QuÃ© sigue?
Prueba desplegar una app en el namespace desarrollo y otra en default.

Usa kubectl describe pod <nombre> -n <namespace> para debuggear.

Explora Helm (gestor de paquetes para Kubernetes) para instalar apps complejas fÃ¡cilmente.

Â¿Necesitas mÃ¡s detalles o un ejemplo concreto? ğŸ˜Š




asi funciono 


minikube service php-nginx-service --url
http://127.0.0.1:65275
! Porque estÃ¡s usando controlador Docker en windows, la terminal debe abrirse para ejecutarlo.


